#!/usr/bin/env ruby

require 'thread'
require 'socket'
require 'pty'
require 'curses'
require 'thor'
require 'terminfo'

module Hokaido
  class CLI < Thor
    DEFAULT_HOST = 0
    DEFAULT_PORT = 4423

    desc :sh, 'Run'
    def sh(host = DEFAULT_HOST, port = DEFAULT_PORT, command = ENV['SHELL'])
      Curses.noecho

      window = Curses.stdscr

      read, write, pid = *PTY.getpty(command)

      input_thread = Thread.new {
        TermInfo.tiocswinsz write, window.maxy.pred, window.maxx.pred

        while c = window.getch
          write.putc c
        end

        exit
      }

      output_thread = Thread.new {
        nonbloq = Queue.new
        client  = TCPSocket.open(host, port)

        Thread.new {
          client.puts 'write'

          while c = nonbloq.deq
            client.putc c
          end
        }

        while c = read.getc
          $stdout.putc c
          nonbloq.enq c
        end
      }

      Process.waitpid pid
    end

    desc :server, 'Start server'
    def server(host = DEFAULT_HOST, port = DEFAULT_PORT)
      queue  = Queue.new
      server = TCPServer.open(host, port)

      loop do
        Thread.new server.accept do |client|
          case client.gets.chomp
          when 'write'
            client.puts ':)'

            while c = client.getc
              queue.enq c
            end
          when 'read'
            client.puts '=)'

            while c = queue.deq
              client.putc c
            end
          else
            client.puts ':('
          end
        end
      end
    end

    desc :viewer, 'Open viewer'
    def viewer(host = DEFAULT_HOST, port = DEFAULT_PORT)
      client = TCPSocket.open(host, port)
      client.puts 'read'

      while c = client.getc
        $stdout.putc c
      end
    end
  end
end

Hokaido::CLI.start
